{"ast":null,"code":"var _jsxFileName = \"C:\\\\git\\\\WEB-2108\\\\Webbserverprogrammering_1\\\\assignment\\\\frontend\\\\frontend\\\\src\\\\components\\\\Alive.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport AliveService from '../utils/api/service/AliveService.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Alive = () => {\n  _s();\n\n  const [data, setData] = useState('');\n\n  function checkIfAPIIsAlive() {\n    AliveService.alive().then(response => {\n      setData(response.data);\n    }).catch(error => console.log(error));\n  }\n\n  useEffect(() => {\n    checkIfAPIIsAlive();\n  }, []);\n\n  function displayData() {\n    if (data.length !== 0) {\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Response from API: \\\"\", data, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Alive\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), displayData()]\n  }, void 0, true);\n};\n\n_s(Alive, \"VZqd8eS65aqgHhr94QvD8B0VC/4=\");\n\n_c = Alive;\nexport default Alive;\n\nvar _c;\n\n$RefreshReg$(_c, \"Alive\");","map":{"version":3,"sources":["C:/git/WEB-2108/Webbserverprogrammering_1/assignment/frontend/frontend/src/components/Alive.jsx"],"names":["useEffect","useState","AliveService","Alive","data","setData","checkIfAPIIsAlive","alive","then","response","catch","error","console","log","displayData","length"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,sCAAzB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;;AAEA,WAASK,iBAAT,GAA6B;AACzBJ,IAAAA,YAAY,CAACK,KAAb,GACKC,IADL,CACWC,QAAD,IAAc;AAChBJ,MAAAA,OAAO,CAACI,QAAQ,CAACL,IAAV,CAAP;AACH,KAHL,EAIKM,KAJL,CAIYC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAJtB;AAKH;;AAEDX,EAAAA,SAAS,CAAE,MAAM;AACbM,IAAAA,iBAAiB;AACpB,GAFQ,EAEN,EAFM,CAAT;;AAKA,WAASQ,WAAT,GAAuB;AACnB,QAAIV,IAAI,CAACW,MAAL,KAAgB,CAApB,EAAuB;AACnB,0BAAO;AAAA,4CAAyBX,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AACJ;;AAED,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGKU,WAAW,EAHhB;AAAA,kBADJ;AAOH,CA7BD;;GAAMX,K;;KAAAA,K;AA+BN,eAAeA,KAAf","sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport AliveService from '../utils/api/service/AliveService.js'\r\n\r\nconst Alive = () => {\r\n    const [data, setData] = useState('')\r\n\r\n    function checkIfAPIIsAlive() {\r\n        AliveService.alive()\r\n            .then((response) => {\r\n                setData(response.data)\r\n            })\r\n            .catch((error) => console.log(error))\r\n    }\r\n\r\n    useEffect( () => {\r\n        checkIfAPIIsAlive()\r\n    }, [])\r\n\r\n\r\n    function displayData() {\r\n        if (data.length !== 0) {\r\n            return <h3>Response from API: \"{data}\"</h3>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Alive</h1>\r\n            {/*<button onClick={() => checkIfAPIIsAlive()}>Check if API is Alive</button> Choose not to use button but instead have a useEffect*/}\r\n            {displayData()}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Alive"]},"metadata":{},"sourceType":"module"}